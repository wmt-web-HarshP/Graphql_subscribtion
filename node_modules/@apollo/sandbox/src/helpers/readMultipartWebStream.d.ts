/// <reference types="zen-observable" />
import { Observable } from 'zen-observable-ts';
import type { GraphQLError } from 'graphql';
import type MIMEType from 'whatwg-mimetype';
import type { ResponseData } from './postMessageRelayHelpers';
export interface MultipartResponse {
    data: ResponseData & {
        incremental?: Array<ResponseData & {
            path: NonNullable<ResponseData['path']>;
        }>;
        error?: {
            message: string;
            stack?: string;
        };
        hasNext?: boolean;
    };
    headers?: Record<string, string> | Record<string, string>[];
    size: number;
}
export interface MultipartSubscriptionResponse {
    data: {
        errors?: Array<GraphQLError>;
        payload: (ResponseData & {
            error?: {
                message: string;
                stack?: string;
            };
        }) | null;
    };
    headers?: Record<string, string> | Record<string, string>[];
    size: number;
    shouldTerminate?: boolean;
}
export declare function readMultipartWebStream(response: Response, mimeType: MIMEType): {
    closeReadableStream: () => Promise<void>;
    observable: Observable<MultipartResponse | MultipartSubscriptionResponse>;
};
