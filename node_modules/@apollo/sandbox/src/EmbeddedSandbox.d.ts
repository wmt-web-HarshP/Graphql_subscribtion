import type { HandleRequest } from './helpers/postMessageRelayHelpers';
import type { JSONObject } from './helpers/types';
type InitialState = {
    /**
     * optional. Set headers for every operation a user triggers from this Sandbox.
     * Users can check and uncheck these headers, but not edit them.
     */
    sharedHeaders?: Record<string, string>;
    /**
     * optional. defaults to false
     */
    includeCookies?: boolean;
    /**
     * defaults to true. If false, sandbox will not poll your endpoint for your schema.
     * */
    pollForSchemaUpdates?: boolean;
} & (/**
 * Pass collectionId, operationId to embed the document, headers, variables associated
 * with this operation id if you have access to the operation via your collections.
 */ {
    collectionId: string;
    operationId: string;
} | {
    document?: string;
    variables?: JSONObject;
    headers?: Record<string, string>;
    collectionId?: never;
    operationId?: never;
});
export interface EmbeddableSandboxOptions {
    target: string | HTMLElement;
    initialEndpoint?: string;
    initialSubscriptionEndpoint?: string;
    initialState?: InitialState;
    /**
     * Whether or not to run Error tracking, Google Analytics event tracking etc
     */
    runTelemetry?: boolean;
    /**
     * optional. defaults to `return fetch(url, fetchOptions)`
     */
    handleRequest?: HandleRequest;
    /**
     * optional. If this is passed, its value will take precedence over your sandbox connection settings `includeCookies` value.
     * If you pass `handleRequest`, that will override this value and its behavior.
     *
     * @deprecated Use `initialState.includeCookies` instead
     */
    includeCookies?: boolean;
    /**
     * optional. defaults to `true`.
     * Set this to `false` if you want individual users to be able to choose whether
     * to include cookies in their request from their connection settings.
     */
    hideCookieToggle?: boolean;
    /**
     * optional. defaults to true.
     * If false, the endpoint box at the top of sandbox will be `initialEndpoint` permanently
     */
    endpointIsEditable?: boolean;
    /**
     * optional. defaults to true.
     * If false, the `width: 100%` and `height: 100%` are not applied to the iframe dynamically.
     * You might pass false here if you enforce a Content Security Policy that disallows dynamic
     * style injection.
     */
    allowDynamicStyles?: boolean;
}
type InternalEmbeddableSandboxOptions = EmbeddableSandboxOptions & {
    __testLocal__?: boolean;
    initialRequestQueryPlan?: boolean;
    runtime?: string;
};
export declare class EmbeddedSandbox {
    options: InternalEmbeddableSandboxOptions;
    handleRequest: HandleRequest;
    embeddedSandboxIFrameElement: HTMLIFrameElement;
    uniqueEmbedInstanceId: number;
    __testLocal__: boolean;
    private disposable;
    constructor(options: EmbeddableSandboxOptions);
    dispose(): void;
    injectEmbed(): HTMLIFrameElement;
    validateOptions(): void;
}
export {};
